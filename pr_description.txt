# CLI Improvements and Infrastructure Enhancements
## Overview
This PR includes significant improvements to the CLI experience, infrastructure enhancements, bug fixes, and code quality improvements. It consolidates 38 commits of work including dynamic prompts infrastructure, CLI command improvements, test suite organization, and the branch_self deepcopy refactor.
## Key Features
### 1. Dynamic Prompts Infrastructure
- Added dynamic_prompts class with policy() method to functional_prompts.py
- Updated DynamicPrompt type alias to Callable[[Bot, int], Prompt]
- Foundation for more sophisticated prompt strategies
### 2. CLI Command Improvements
- **/auto mode**: Now properly displays user messages and metrics
- **/p command**: Shows best match first and defaults to it (#133)
- **/d command**: Delete prompts from prompt library (#136)
- **/r command**: Show recent prompts with persistent recency list (#136)
- **/add_tool command**: Add tools dynamically during conversation (#139)
- **/config enhancements**: Added options for auto mode prompts, max_tokens, temperature (#141)
- Improved multi-command parsing so commands like /config set X /auto work correctly (#144)
### 3. Branch_Self Refactor (Major)
- **Refactored branch_self to use deepcopy instead of save/load**
- Implemented __getstate__ and __setstate__ for Bot class
- Decomposed save/load into _serialize() and _deserialize() helper methods
- **Fixed PowerShell bug in branches** (module namespace preservation)
- Removed ~70 lines of complexity from branch_self
- **Benefits**:
  - Faster execution (no file I/O)
  - Cleaner code (direct memory copy)
  - More maintainable
  - Enables bot multiplication pattern (ot * N)
  - Foundation for parallel operations
### 4. Bug Fixes
- #147: Fixed branch_self allow_work=True bug
- #152/#153: Added libcst, dill, psutil to setup.py
- #155: Updated python_edit validation
- Fixed callback issues with Bot.load()
- Fixed tool_handler.bot reference after Bot.load()
- Fixed metrics display timing in /auto mode
- Fixed worker crashes in parallel test execution
### 5. Test Infrastructure Improvements
- Added @pytest.mark.serial to flaky tests
- Fixed test artifact pollution with new fixtures
- Added comprehensive PowerShell tests
- Added MockBot tests for parallel execution
- Marked API tests properly with @pytest.mark.api
- **All tests now pass or are properly skipped**
### 6. Code Quality
- **Applied black formatter** to 17 files
- **Fixed 40 flake8 errors** (unused imports, f-strings without placeholders, etc.)
- **Applied isort** to organize imports
- **Removed 12 BOMs** from files
- Added Recycle Bin safety to PowerShell file deletions
## Test Results
- ✅ **965+ tests passing**
- ✅ All linting checks pass (black, isort, flake8)
- ✅ Flaky tests properly marked with @pytest.mark.serial
- ✅ Known issues properly skipped with documentation
## Breaking Changes
None - all changes are backward compatible
## Migration Guide
No migration needed - this is a drop-in enhancement
## Related Issues
Fixes #133, #134, #135, #136, #138, #139, #140, #141, #142, #143, #144, #145, #147, #148, #149, #150, #151, #152, #153, #154, #155
## Checklist
- [x] All tests pass
- [x] Linting checks pass (black, isort, flake8)
- [x] Documentation updated where needed
- [x] No breaking changes
- [x] Rebased onto latest main
