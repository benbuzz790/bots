File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_21-07-26\src\game.py

Requirements:
1. Implement a Game class to manage the overall game state and flow.
2. Create methods for initializing a new game, including setting up the board and players.
3. Implement a main game loop that alternates between players' turns.
4. Develop logic to handle player moves, including validation and updating the game state.
5. Implement win condition checks after each move to determine if a player has won.
6. Create a method to check for a draw condition when the board is full.
7. Implement a game-over state and logic to end the game when appropriate.
8. Include error handling for invalid moves or unexpected game states.
9. Implement a method to reset the game for a new round.
10. Include unit tests to verify the correctness of game logic, win conditions, and state management.
11. Ensure the file does not exceed 100 lines of code, focusing on core functionality.
12. Implement proper integration with the board.py and player.py modules.

Goals:
The 'game.py' file serves as the central component of the Connect Four game, orchestrating the game flow, managing the game state, and implementing the core game logic. It acts as a bridge between the board representation, player actions, and win condition checks, providing a cohesive structure for the game's functionality. This file aims to encapsulate the main game loop, turn management, and overall game progression while maintaining modularity and testability.

Interface:
from typing import List, Tuple
from board import Board
from player import Player

class Game:
    def __init__(self, players: List[Player]):
        pass

    def start_game(self) -> None:
        pass

    def make_move(self, player: Player, column: int) -> bool:
        pass

    def check_win(self) -> Tuple[bool, Player]:
        pass

    def check_draw(self) -> bool:
        pass

    def is_game_over(self) -> bool:
        pass

    def reset_game(self) -> None:
        pass

    def get_current_player(self) -> Player:
        pass

    def get_board_state(self) -> Board:
        pass

