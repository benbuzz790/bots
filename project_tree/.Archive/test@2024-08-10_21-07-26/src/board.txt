File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_21-07-26\src\board.py

Requirements:
1. Implement a Board class to represent the Connect Four game grid.
2. Create a method to initialize an empty game board with customizable dimensions (default 6x7).
3. Implement a method to place a piece in a specified column, handling gravity (pieces fall to the lowest available position).
4. Develop a method to check if a column is full to prevent invalid moves.
5. Implement a method to retrieve the current state of the board (e.g., as a 2D list or array).
6. Create a method to check if the board is completely full (draw condition).
7. Implement methods to query the state of individual cells (empty, player 1, or player 2).
8. Develop a method to reset the board to its initial empty state.
9. Implement error handling for out-of-bounds access and invalid operations.
10. Include unit tests to verify board operations, piece placement, and state management.
11. Ensure the file does not exceed 100 lines of code, focusing on essential functionality.
12. Implement a string representation of the board for easy debugging and display.

Goals:
The 'board.py' file is responsible for representing and managing the Connect Four game board. It encapsulates the data structure and operations related to the game grid, handling piece placement, board state queries, and providing a clear interface for interacting with the game board. This module aims to abstract the complexities of board management, ensuring a clean separation of concerns and facilitating easy integration with the game logic and player interactions.

Interface:
from typing import List, Tuple, Optional

class Board:
    def __init__(self, rows: int = 6, columns: int = 7):
        pass

    def place_piece(self, column: int, player: int) -> bool:
        pass

    def is_column_full(self, column: int) -> bool:
        pass

    def get_board_state(self) -> List[List[int]]:
        pass

    def is_board_full(self) -> bool:
        pass

    def get_cell_state(self, row: int, column: int) -> Optional[int]:
        pass

    def reset_board(self) -> None:
        pass

    def get_dimensions(self) -> Tuple[int, int]:
        pass

    def __str__(self) -> str:
        pass

