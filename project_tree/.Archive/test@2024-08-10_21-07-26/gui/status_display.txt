File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_21-07-26\gui\status_display.py

Requirements:
1. Implement a Tkinter-based widget to display game status information
2. Create a layout that clearly shows the current player's turn
3. Display the game result (winner or draw) when the game ends
4. Provide a method to update the displayed information based on game state
5. Ensure the display is responsive and maintains proper layout when resized
6. Implement color-coding or visual cues to distinguish between different game states
7. Create methods to programmatically retrieve displayed information for testing
8. Ensure all visual elements are accessible for unit testing without user interaction
9. Implement error handling for unexpected game states or information
10. Provide an option to display player scores or game statistics
11. Ensure compatibility with different text lengths for player names and messages
12. Implement a method to reset the display for new games

Goals:
- Create a visual component to display game status information
- Provide real-time updates on current player, game progress, and results
- Enhance user experience by offering clear and concise game-related information
- Integrate seamlessly with the main window and game logic
- Support easy customization and localization of displayed messages

Interface:
import tkinter as tk
from typing import Optional, Dict

class StatusDisplay(tk.Frame):
    def __init__(self, master: tk.Tk):
        pass

    def update_current_player(self, player_name: str) -> None:
        pass

    def display_game_result(self, result: str, winner: Optional[str] = None) -> None:
        pass

    def update_game_state(self, state: Dict[str, any]) -> None:
        pass

    def reset_display(self) -> None:
        pass

    def set_player_colors(self, player1_color: str, player2_color: str) -> None:
        pass

    def update_scores(self, player1_score: int, player2_score: int) -> None:
        pass

    def get_displayed_player(self) -> str:
        pass

    def get_displayed_result(self) -> str:
        pass

    def get_displayed_scores(self) -> Dict[str, int]:
        pass

    def set_custom_message(self, message: str) -> None:
        pass

    def clear_custom_message(self) -> None:
        pass

    def set_error_state(self, error: bool, message: Optional[str] = None) -> None:
        pass

