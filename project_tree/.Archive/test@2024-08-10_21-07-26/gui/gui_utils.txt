File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_21-07-26\gui\gui_utils.py

Requirements:
1. Implement color constants and theme configurations for consistent GUI appearance
2. Create utility functions for common GUI operations (e.g., centering windows, creating styled buttons)
3. Develop helper classes for custom widgets or frequently used widget combinations
4. Implement functions to handle font management and text scaling
5. Provide utility functions for input validation and error handling in GUI contexts
6. Create helper functions for programmatically interacting with GUI elements during testing
7. Implement utilities for managing timeouts and automated dismissal of GUI elements
8. Develop functions for logging and debugging GUI-related events and states
9. Create utilities for handling responsive layouts and widget resizing
10. Implement helper functions for managing game state representation in the GUI
11. Provide utilities for converting between game logic data structures and GUI-friendly formats
12. Develop functions for creating and managing tooltips or help text for GUI elements

Goals:
- Provide utility functions and classes to support the GUI components
- Centralize common GUI-related operations and configurations
- Enhance code reusability and maintainability across GUI modules
- Facilitate consistent styling and behavior of GUI elements
- Offer helper functions for testing and debugging GUI components

Interface:
import tkinter as tk
from typing import Dict, Any, Callable, Tuple

# Color and theme constants
COLORS: Dict[str, str]
THEME: Dict[str, Any]

def center_window(window: tk.Tk, width: int, height: int) -> None:
    pass

def create_styled_button(master: tk.Widget, text: str, command: Callable, **kwargs) -> tk.Button:
    pass

class CustomWidget(tk.Frame):
    def __init__(self, master: tk.Widget, **kwargs):
        pass

def get_scaled_font(base_size: int, scale_factor: float = 1.0) -> tk.font.Font:
    pass

def validate_input(input_value: Any, input_type: type) -> bool:
    pass

def show_error_message(message: str, parent: tk.Widget) -> None:
    pass

def simulate_click(widget: tk.Widget) -> None:
    pass

def set_timeout(widget: tk.Widget, timeout: float, callback: Callable) -> None:
    pass

def log_gui_event(event: str, details: Dict[str, Any]) -> None:
    pass

def create_responsive_grid(master: tk.Widget, rows: int, columns: int) -> tk.Frame:
    pass

def convert_game_state_to_gui(game_state: Dict[str, Any]) -> Dict[str, Any]:
    pass

def convert_gui_state_to_game(gui_state: Dict[str, Any]) -> Dict[str, Any]:
    pass

def create_tooltip(widget: tk.Widget, text: str) -> None:
    pass

def get_widget_state(widget: tk.Widget) -> Dict[str, Any]:
    pass

def set_widget_state(widget: tk.Widget, state: Dict[str, Any]) -> None:
    pass

def create_color_scheme(primary: str, secondary: str, accent: str) -> Dict[str, str]:
    pass

def apply_theme(widget: tk.Widget, theme: Dict[str, Any]) -> None:
    pass

