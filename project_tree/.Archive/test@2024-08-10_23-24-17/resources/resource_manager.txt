File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_23-24-17\resources\resource_manager.py

Requirements:
1. Implement functions to load and cache image resources (game pieces, board background, app icon)
2. Create methods to load and parse configuration files (settings.json and default_config.py)
3. Implement error handling for missing or corrupt resource files
4. Provide a caching mechanism to avoid reloading frequently used resources
5. Include functions to retrieve specific resources by name or type
6. Implement version checking for configuration files to ensure compatibility
7. Create a method to reload resources in case of runtime changes
8. Implement resource cleanup methods to free memory when resources are no longer needed
9. Add logging functionality to track resource loading and any issues encountered
10. Ensure thread-safety for resource access in case of concurrent operations
11. Implement a method to get the full path of a resource given its relative path
12. Create utility functions for common resource operations (e.g., image resizing)
13. Include unit tests for all major functions within the resource manager
14. Provide a simple API for other modules to easily access and use resources
15. Implement lazy loading for resources to optimize memory usage and startup time

Goals:
The 'resource_manager.py' file serves as a central module for managing and accessing all game resources, including images and configuration files. Its purpose is to provide a unified interface for loading, caching, and retrieving resources efficiently throughout the Connect Four game. This module aims to improve resource handling, reduce redundant code, and ensure consistent access to game assets across different components of the application.

Interface:
from typing import Dict, Any, Optional
import logging

class ResourceManager:
    @classmethod
    def initialize(cls, resource_dir: str) -> None:
        pass

    @classmethod
    def get_image(cls, image_name: str) -> Any:
        pass

    @classmethod
    def get_config(cls) -> Dict[str, Any]:
        pass

    @classmethod
    def reload_resources(cls) -> None:
        pass

    @classmethod
    def cleanup(cls) -> None:
        pass

    @classmethod
    def get_resource_path(cls, relative_path: str) -> str:
        pass

    @classmethod
    def resize_image(cls, image_name: str, width: int, height: int) -> Any:
        pass

def load_image(image_path: str) -> Any:
    pass

def load_config(config_path: str) -> Dict[str, Any]:
    pass

def check_config_version(config: Dict[str, Any]) -> bool:
    pass

def get_logger() -> logging.Logger:
    pass

class ResourceError(Exception):
    pass

def run_tests() -> None:
    pass

