File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_23-24-17\src\utils.py

Requirements:
1. Implement input validation functions for user inputs (e.g., column selection).
2. Create error handling utilities for common exceptions in the game.
3. Define constants for game-wide use (e.g., board dimensions, player symbols).
4. Implement a logging utility for debugging and tracking game events.
5. Create utility functions for converting between different data representations (e.g., board state to string).
6. Implement helper functions for checking game rules (e.g., valid move checks).
7. Develop utility functions for AI decision-making processes.
8. Create functions for formatting and displaying game-related messages.
9. Implement a simple configuration management system for game settings.
10. Develop utility functions for performance profiling and optimization.
11. Create helper functions for unit testing (e.g., board state generators).
12. Implement error classes specific to the Connect Four game logic.
13. Develop utility functions for handling file I/O (e.g., saving/loading game states).
14. Create functions for generating random game scenarios for testing.
15. Ensure all utility functions have comprehensive unit tests.

Goals:
The 'utils.py' file serves as a central repository for utility functions, constants, and shared resources used across the Connect Four game project. Its primary purpose is to provide reusable code for common tasks, enhance code organization, and promote consistency throughout the application. This module aims to simplify error handling, input validation, and other repetitive operations, making the main game logic more focused and easier to maintain.

Interface:
from typing import List, Dict, Any
import logging

# Constants
BOARD_ROWS: int
BOARD_COLUMNS: int
PLAYER_SYMBOLS: Dict[int, str]

# Input validation
def validate_column_input(input_value: str) -> int:
    pass

# Error handling
class ConnectFourError(Exception):
    pass

def handle_game_exception(error: Exception) -> str:
    pass

# Logging
def setup_logger() -> logging.Logger:
    pass

# Data conversion
def board_to_string(board: List[List[int]]) -> str:
    pass

# Game rule checks
def is_valid_move(board: List[List[int]], column: int) -> bool:
    pass

# AI utilities
def evaluate_board_state(board: List[List[int]], player: int) -> int:
    pass

# Message formatting
def format_game_message(message_type: str, **kwargs) -> str:
    pass

# Configuration management
def load_game_config(config_file: str) -> Dict[str, Any]:
    pass

# Performance profiling
def profile_function(func: callable) -> callable:
    pass

# Testing utilities
def generate_random_board() -> List[List[int]]:
    pass

# File I/O
def save_game_state(game_state: Dict[str, Any], filename: str) -> None:
    pass

def load_game_state(filename: str) -> Dict[str, Any]:
    pass

# Random scenario generation
def generate_test_scenario() -> Dict[str, Any]:
    pass

