File Name: C:\Users\Ben Rinauto\Documents\Code\llm-utilities-git\llm-utilities\.experiments\test@2024-08-10_23-24-17\src\game.py

Requirements:
1. Implement a Game class to encapsulate the Connect Four game logic.
2. Include methods for initializing the game, making moves, and checking for win/draw conditions.
3. Manage player turns and track the current game state.
4. Integrate with the Board class from 'board.py' for game state representation.
5. Utilize the Player class from 'player.py' for player management.
6. Implement win checking algorithms for horizontal, vertical, and diagonal connections.
7. Provide a method to reset the game state for new games.
8. Include error handling for invalid moves and out-of-turn actions.
9. Implement a game loop that alternates between players until a win or draw occurs.
10. Create self-contained unit tests for all public methods of the Game class.
11. Ensure the module adheres to the 200-line code limit.
12. Use utility functions from 'utils.py' for input validation and error handling.
13. Implement a method to return the current game state for external use (e.g., by the GUI).
14. Provide a simple text-based interface for console testing and debugging.
15. Ensure all methods and attributes are properly documented with docstrings.

Goals:
The 'game.py' file serves as the central module for the Connect Four game logic. Its purpose is to orchestrate the game flow, manage player turns, track the game state, and determine win conditions. This module acts as the core engine of the game, integrating with other components like the board and players to create a functional Connect Four game.

Interface:
from typing import List, Tuple
from board import Board
from player import Player

class Game:
    def __init__(self, player1: Player, player2: Player):
        pass

    def initialize_game(self) -> None:
        pass

    def make_move(self, column: int) -> bool:
        pass

    def check_win(self) -> bool:
        pass

    def check_draw(self) -> bool:
        pass

    def reset_game(self) -> None:
        pass

    def get_current_player(self) -> Player:
        pass

    def get_game_state(self) -> Tuple[Board, Player, bool, bool]:
        pass

    def play_game(self) -> None:
        pass

def run_console_game() -> None:
    pass

