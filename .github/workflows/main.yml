name: CI
on:
  pull_request:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  # UTF-8 encoding environment variables for Windows compatibility
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    timeout-minutes: 15
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12']
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GH_TOKEN: ${{ github.token }}
      # Additional UTF-8 encoding for job-level
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Configure UTF-8 encoding
        shell: pwsh
        run: |
          # Set PowerShell to use UTF-8
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          # Set environment variables for the session
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Install package
        run: pip install -e .
      - name: Remove BOMs from all files
        run: |
          python -m bots.dev.remove_boms
      - name: Run unit tests
        if: env.OPENAI_API_KEY != '' || env.ANTHROPIC_API_KEY != ''
        run: pytest tests/ --tb=short -v --maxfail=10 -n 0
      - name: Run integration tests
        if: env.OPENAI_API_KEY != '' || env.ANTHROPIC_API_KEY != ''
        run: pytest tests/ --tb=short -v --maxfail=5 -n 0
        continue-on-error: true
  integration-tests:
    name: Run Integration Tests
    runs-on: windows-latest
    timeout-minutes: 20
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GH_TOKEN: ${{ github.token }}
      # UTF-8 encoding for integration tests
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Configure UTF-8 encoding
        shell: pwsh
        run: |
          # Set PowerShell to use UTF-8
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          # Set environment variables for the session
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-timeout
      - name: Install package
        run: pip install -e .
      - name: Remove BOMs from all files
        run: |
          python -m bots.dev.remove_boms
      - name: Run comprehensive integration tests
        if: env.OPENAI_API_KEY != '' && env.ANTHROPIC_API_KEY != ''
        run: pytest tests/ --tb=long -v --timeout=300 -n 0
        continue-on-error: false
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test_results.xml
          retention-days: 7
  style-check:
    name: Code Quality & Style Check
    timeout-minutes: 10
    runs-on: windows-latest
    env:
      # UTF-8 encoding for style checks
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Configure UTF-8 encoding
        shell: pwsh
        run: |
          # Set PowerShell to use UTF-8
          $PSDefaultParameterValues['*:Encoding'] = 'utf8'
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [Console]::InputEncoding = [System.Text.Encoding]::UTF8
          # Set environment variables for the session
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          echo "PYTHONIOENCODING=utf-8" >> $env:GITHUB_ENV
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy
      - name: Install package
        run: pip install -e .
      - name: Remove BOMs from all files
        run: |
          python -m bots.dev.remove_boms
      - name: Check Black formatting
        run: |
          black --check --diff .
      - name: Check isort import sorting
        run: |
          isort --check-only --diff .
      - name: Run flake8 linting
        run: |
          flake8 . --count --statistics --show-source
      - name: Run mypy type checking
        run: |
          mypy bots/ --ignore-missing-imports
        continue-on-error: true
      - name: Check for circular dependencies
        run: |
          pip install pydeps
          pydeps bots --show-deps --max-bacon=2 || echo "Circular dependency check completed"
        continue-on-error: true
  actionlint:
    name: GitHub Actions Lint
    runs-on: windows-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Download actionlint
        run: |
          Invoke-WebRequest -Uri "https://github.com/rhymond/actionlint/releases/latest/download/actionlint_windows_amd64.zip" -OutFile "actionlint.zip"
          Expand-Archive -Path "actionlint.zip" -DestinationPath "."
      - name: Run actionlint
        run: |
          .\actionlint.exe .github/workflows/*.yml
